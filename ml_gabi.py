# -*- coding: utf-8 -*-
"""ML_gabi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_WxxLxlG90c3T3G63tPV7_G-JSG92tr0
"""

# Importar las bibliotecas necesarias
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.neighbors import NearestNeighbors

# Cargar el dataset
data = pd.read_csv('movies_clean.csv')

data = data[['title', 'belongs_to_collection', 'original_language', 'genres', 'overview', 'popularity', 'production_companies', 'production_countries', 'release_date', 'cast', 'director']]
#data = data[['genres', 'overview', 'popularity', 'release_date', 'cast', 'director']]

# Combinar las características en una sola columna
data['features'] = data.apply(lambda x: ' '.join(x.values.astype(str)), axis=1)

# Crear la matriz TF-IDF
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(data['features'])

# Crear el modelo de vecinos más cercanos
knn = NearestNeighbors(metric='cosine', algorithm='brute')
knn.fit(tfidf_matrix)

def get_recommendations(title, knn_model, data, num_recommendations=5):
    # Obtener el índice de la película que coincide con el título
    idx = data[data['title'] == title].index[0]

    # Encontrar los vecinos más cercanos
    distances, indices = knn_model.kneighbors(tfidf_matrix[idx], n_neighbors=num_recommendations+1)

    # Obtener los índices de las películas más similares (excluyendo la película de consulta)
    movie_indices = indices.flatten()[1:]

    # Devolver las películas recomendadas
    return data['title'].iloc[movie_indices]

# Obtener las recomendaciones para una película específica
movie_title = 'titanic'
recommendations = get_recommendations(movie_title, knn, data)

# Imprimir las recomendaciones
print("Recomendaciones para", movie_title)
print(recommendations)